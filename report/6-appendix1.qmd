## Appendix 1: Supplementary tables and figures

### Data

#### The German protest registrations dataset

```{python}
# | echo: False

from IPython.display import Markdown
from src.paths import tables
from src.data.protests.german_protest_registrations.data_description import (
    pretty_overview_table,
)

df = pretty_overview_table(symbol="x")
# Markdown(df.to_markdown(index=False))
df.to_csv(tables / "gpreg-overview.csv", sep=";")
```

:::{.column-page}
\begingroup
\scriptsize\selectfont
\csvautobooktabular[separator=semicolon,respect sharp=true]{/Users/david/Repositories/protest-impact/report/tables/gpreg-overview.csv}
\endgroup
:::

Table: Overview of the German Protest Registrations (GPReg) dataset. _kpop_ = population in 1000; _cap?_ = whether the city is the political capital of its region; _reg?_ = whether the number of registered protesters (as per the organizers) is available; _obs?_ = whether the number of observed protesters (as per the police) is available; _incl?_ = whether the data is used in this thesis.


#### Sociodemographic variables {#sec-app-sociodem}

```{python}
# | echo: false

import pandas as pd
from src.paths import interim_data

df = pd.read_csv(
    interim_data / "regionalatlas-statistikportal/sociodemographic-indicators.csv",
    index_col=0,
)
Markdown("\n".join([f" - {a}" for a in df.index.to_list()]))
```


#### Queries for retrieving article counts {#sec-app-queries}

```{python}
# | echo: False

from IPython.display import Markdown
from src.paths import tables
from src.data.protests.keywords import climate_query_table

df = climate_query_table()
# Markdown(df.to_markdown(index=False))
df.to_csv(tables / "queries.csv", index=False)
```

:::{.column-page}
\begingroup
\footnotesize\selectfont
\csvautobooktabular[separator=comma,respect all]{/Users/david/Repositories/protest-impact/report/tables/queries.csv}
\endgroup
:::

Table: Queries for retrieving article counts from online and print newspapers. The words for each category are joined by `OR` operators, and the resulting sub-queries are further combined as described in @sec-data-discourse. The query for the protest events is adapted from @wiedemannGeneralizedApproachProtest2022.

### Results

#### Regression {#sec-app1-reg}

\begingroup
\footnotesize\selectfont
```{python}
# | label: fig-reg-details
# | fig-cap: "Detailed results for the best regression model from @sec-res-reg. Dependent variable is the absolute number of articles mentioning climate change from the treatment date and the following day. Due to including time series lags there are overall 140 parameters plus a constant term, so only the 20 parameters with lowest p-values are displayed. Note that for the weekday dummies the first value (Friday) is dropped and the other dummies are to be interpreted in relation to it."
# | echo: False

# import pandas as pd
# from IPython.display import display
# import warnings
# from src.models.regression.hyperopt import best_regression

# warnings.simplefilter(action='ignore', category=FutureWarning)

# tables = best_regression().summary().tables
# display(tables[0])
# results_as_html = tables[1].as_html()
# df = pd.read_html(results_as_html, header=0, index_col=0)[0]
# display(df.sort_values("P>|z|").head(20).sort_index())
```
\endgroup

\begingroup
\footnotesize\selectfont
```{python}
# | label: fig-reg-details-occ
# | fig-cap: "Detailed results for the best regression model from @sec-res-reg: Coefficients for the occurrence of a protest."
# | echo: False
# display(
#     df[(df.index.str.startswith("occ") & df.index.str.endswith("lag0"))].sort_index()
# )
```
\endgroup

#### Instrumental variables {#sec-app1-iv}


\begingroup
\footnotesize\selectfont
```{python}
# | label: fig-iv-basic
# | fig-cap: Regression coefficients and p-values for the impact of the standardized instruments on the treatment, controlling for known confounders. In the left column each instrument is regressed on its own, in the right column all instruments together; in both cases together with the known confounders. Results are sorted by p-values for the single regressions.
# | echo: False

from src.models.instrumental_variable import get_coefficients

get_coefficients("weather_covid")[0].sort_values(by=("combi", "pval"))
```
\endgroup

\begingroup
\footnotesize\selectfont
```{python}
# | label: fig-xxx
# | fig-cap: "hum"
# | echo: False

from src.models.instrumental_variable import get_coefficients

get_coefficients("weather_covid_season")[0].sort_values(by=("combi", "pval"))
```
\endgroup

\begingroup
\footnotesize\selectfont
```{python}
# | label: fig-zyz
# | fig-cap: hom
# | echo: False

from src.models.instrumental_variable import get_coefficients

get_coefficients("pc_weather_covid")[0].sort_values(by=("combi", "pval")).head(10)
```
\endgroup

\begingroup
\footnotesize\selectfont
```{python}
# | label: fig-iv-pc-season
# | fig-cap: Regression coefficients and p-values for the impact of the principal components of the seasonal and residual (deseasoned) variables on the treatment, controlling for known confounders. In the left column each instrument is regressed on its own, in the right column all instruments together; in both cases together with the known confounders. Results are sorted by p-values for the combined regression.
# | echo: False

from src.models.instrumental_variable import get_coefficients

get_coefficients("pc_weather_covid_season")[0].sort_values(by=("combi", "pval")).head(10)
```
\endgroup
