<!--

Analysis of the results with graphics like bargraphs and boxplots has been made. Statistical methods have been employed to compare different results. AUCs have been obtained. Minimal verification.
+ Attention has been paid to the distribution of the data. Verification has been carried out. Attention is paid to overfitting.
+ Results have been analysed with proper statistics. Model assumptions of statistical methods are verified or methods that do not make assumptions were employed for non-Gaussian data. Checks were made to avoid hidden overfitting.
+ Best approach for obtaining significant results was taken while refraining from p-value hacking.

 -->

## Results

### Evaluation of methods

#### Regression

regression table

MSE generalizability

#### Instrumental variables

stuff

#### Synthetic control

Pre-fit MSE, plots

Difficulties with large protest events: plot size vs #regions

#### Propensity scores

F1

### Placebo tests

#### Placebo outcome

```{python}
# | column: page
# | echo: false
import matplotlib.pyplot as plt
from src.visualization.impacts import plot_trends

fig, axes = plot_trends(cumulative=False, lags=range(-7,1), steps=range(-28,8))
fig.suptitle("Placebo test: estimating the causal impact on past outcomes")
axes[0].set_ylim(-3, 5)
axes[0].set_xticks(range(-28, 8, 7))
plt.show()
```

#### Placebo treatment

```{python}
# | column: page
# | echo: false
import matplotlib.pyplot as plt
from src.visualization.impacts import plot_trends

fig, axes = plot_trends(cumulative=False, lags=range(-7,1), steps=range(-15,15), random_treatment_global=56)
fig.suptitle("Placebo test: estimating the causal impact of random events")
# axes[0].set_ylim(-3, 5)
axes[0].set_xticks(range(-14, 14, 7))
plt.show()
```

```{python}
# | column: page
# | echo: false
import matplotlib.pyplot as plt
from src.visualization.impacts import plot_trends

fig, axes = plot_trends(cumulative=False, lags=range(-7,1), steps=range(-15,15), random_treatment_regional=25)
fig.suptitle("Placebo test: estimating the causal impact of random events")
# axes[0].set_ylim(-3, 5)
axes[0].set_xticks(range(-14, 14, 7))
plt.show()
```

```{python}
# | fig-caption: Error bars are 95% confidence intervals.
# | column: page
# | echo: false

# Does this even make so much sense, placebo for protest groups? maybe leave out.

import altair as alt
from src.visualization.impacts import plot_groups

alt.renderers.enable('altair_saver', fmts=["html", "svg"])
plot_groups(kind="methods", step=1, random_treatment_global=True)
```

### Causal impact estimates

#### Time series

```{python}
# | column: page
# | echo: false
import matplotlib.pyplot as plt
from src.visualization.impacts import plot_trends

fig, axes = plot_trends(cumulative=False)
fig.suptitle("Time series of the causal impact by method and coverage dimension")
axes[0].set_ylim(-5, 5)
plt.show()
```

#### Cumulative impact

```{python}
# | column: page
# | echo: false
fig, axes = plot_trends(cumulative=True)
fig.suptitle("Cumulative time series of the causal impact by method and coverage dimension")
axes[0].set_ylim(-10, 50)
plt.show()
```

#### Protest groups

Causal effects for the individual protest groups differ substantially between regression and inverse propensity weighting and are not statistically significant at p=0.05 for the doubly robust estimator.

```{python}
# | fig-caption: Error bars are 95% confidence intervals.
# | column: page
# | echo: false

import altair as alt
from src.visualization.impacts import plot_groups

alt.renderers.enable('altair_saver', fmts=["html", "svg"])
plot_groups(kind="groups", step=1)
```

```{python}
# | fig-caption: Error bars are 95% confidence intervals.
# | column: page
# | echo: false

import altair as alt
from src.visualization.impacts import plot_groups

alt.renderers.enable('altair_saver', fmts=["html", "svg"])
plot_groups(kind="groups", step=6)
```

```{python}
# | fig-caption: Error bars are 95% confidence intervals.
# | column: page
# | echo: false

import altair as alt
from src.visualization.impacts import plot_groups

alt.renderers.enable('altair_saver', fmts=["html", "svg"])
plot_groups(kind="methods", step=1)
```
